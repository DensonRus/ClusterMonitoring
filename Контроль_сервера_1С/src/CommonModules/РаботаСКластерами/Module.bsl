#Область ПрограммныйИнтерфейс

// Создает COM-объект V8*.ComConnector.
//
// Возвращаемое значение: COMОбъект.
//
Функция COMСоединитель() Экспорт
	
	Если БезопасныйРежим() <> Ложь Тогда
		ВызватьИсключение НСтр("ru = 'Внимание! Администрирование кластера невозможно в безопасном режиме'");
	КонецЕсли;
	
	Возврат Новый COMОбъект("v83.COMConnector");
	
КонецФункции // COMСоединитель()

// Устанавливает соединение с агентом сервера.
//
// Параметры:
//  COMСоединитель - COMОбъект V8*.ComConnector,
//  АдресАгентаСервера - Строка, сетевой адрес агента сервера,
//  ПортАгентаСервера - Число, сетевой порт агента сервера (типичное значение 1540).
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IV8AgentConnection.
//
Функция СоединениеСАгентомСервера(COMСоединитель, Знач АдресАгентаСервера, Знач ПортАгентаСервера) Экспорт
	
	СтрокаСоединенияСАгентомСервера = "tcp://" + АдресАгентаСервера + ":" + Формат(ПортАгентаСервера, "ЧГ=0");
	СоединениеСАгентомСервера = COMСоединитель.ConnectAgent(СтрокаСоединенияСАгентомСервера);
	Возврат СоединениеСАгентомСервера;
	
КонецФункции // СоединениеСАгентомСервера()

// Возвращает кластер серверов.
//
// Параметры:
//  СоединениеСАгентомСервера - COMОбъект, реализующий интерфейс IV8AgentConnection,
//  ПортКластера - Число, сетевой порт менеджера кластера (типичное значение 1541),
//  ИмяАдминистратораКластера - Строка, имя учетной записи администратора кластера,
//  ПарольАдминистратораКластера - Строка, пароль учетной записи администратора кластера.
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IClusterInfo.
//
Функция ПолучитьКластер(СоединениеСАгентомСервера, Знач ПортКластера, Знач ИмяАдминистратораКластера, Знач ПарольАдминистратораКластера) Экспорт
	
	Для Каждого Кластер Из СоединениеСАгентомСервера.GetClusters() Цикл
		
		Если Кластер.MainPort = ПортКластера Тогда
			
			СоединениеСАгентомСервера.Authenticate(Кластер, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			
			Возврат Кластер;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'На рабочем сервере %1 не найден кластер %2'"),
		СоединениеСАгентомСервера.ConnectionString,
		ПортКластера);
	
КонецФункции // ПолучитьКластер()

// Устанавливает соединение с рабочим процессом.
//
// Параметры:
//  COMСоединитель - COMОбъект V8*.ComConnector,
//  СоединениеСАгентомСервера - COMОбъект, реализующий интерфейс IV8AgentConnection,
//  Кластер - COMОбъект, реализующий интерфейс IClusterInfo.
//
// Возвращаемое значение: COMОбъект, реализующий интерфейс IV8ServerConnection.
//
Функция СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер) Экспорт
	
	Для Каждого РабочийПроцесс Из СоединениеСАгентомСервера.GetWorkingProcesses(Кластер) Цикл
		Если РабочийПроцесс.Running И РабочийПроцесс.IsEnable  Тогда
			СтрокаСоединенияСРабочимПроцессом = РабочийПроцесс.HostName + ":" + Формат(РабочийПроцесс.MainPort, "ЧГ=");
			Возврат COMСоединитель.ConnectWorkingProcess(СтрокаСоединенияСРабочимПроцессом);
		КонецЕсли;
	КонецЦикла;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В кластере серверов %1:%2 не найдено активных рабочих процессов.'"),
		Кластер.HostName,
		Формат(Кластер.MainPort, "ЧГ=0"));
	
КонецФункции // СоединениеСРабочимПроцессом()

// Возвращает соответствие имен свойств информационной базы, описывающих состояние
//  блокировки сеансов и регламентных заданий, для структур, используемых в API и
//  объектов объектной модели COM-администратора.
//
// Возвращаемое значение: ФиксированнаяСтруктура:
//  Ключ - Строка, имя свойства в API (см.
//         АдминистрированиеКластераКлиентСервер.СвойстваБлокировкиСеансовИРегламентныхЗаданий()),
//  Значение - Строка, имя свойства объекта.
//
Функция СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("БлокировкаСеансов", "SessionsDenied");
	Результат.Вставить("ДатаС", "DeniedFrom");
	Результат.Вставить("ДатаПо", "DeniedTo");
	Результат.Вставить("Сообщение", "DeniedMessage");
	Результат.Вставить("КодРазрешения", "PermissionCode");
	Результат.Вставить("ПараметрБлокировки", "DeniedParameter");
	Результат.Вставить("БлокировкаРегламентныхЗаданий", "ScheduledJobsDenied");
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции // СловарьСвойствБлокировкиСеансовИРегламентныхЗаданий()


#КонецОбласти 