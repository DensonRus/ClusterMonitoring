#Область ПрограммныйИнтефейс

// Заполняет информацию об информационных базах и их свойствах. 
//
Процедура ЗаполнениеПараметровИнформационныхБаз() Экспорт
	
	Выборка = Справочники.Серверы1С.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		COMСоединитель = РаботаСКластерами.COMСоединитель();
		
		СоединениеСАгентомСервера = РаботаСКластерами.СоединениеСАгентомСервера(
			COMСоединитель,
			Выборка.Имя,
			Выборка.Порт);
		
		Кластер = РаботаСКластерами.ПолучитьКластер(
			СоединениеСАгентомСервера,
			Константы.ПортКластера.Получить(),
			Выборка.Логин,
			Выборка.Пароль);
		
		СоединениеСРабочимПроцессом = РаботаСКластерами.СоединениеСРабочимПроцессом(COMСоединитель, СоединениеСАгентомСервера, Кластер);		
		
		ЗаполнитьПараметрыБазСервера(СоединениеСРабочимПроцессом, Выборка.Ссылка);		
		
		COMСоединитель 				= Неопределено;
		СоединениеСАгентомСервера 	= Неопределено;
		Кластер						= Неопределено;
		СоединениеСРабочимПроцессом = Неопределено;		
		
	КонецЦикла;  
	
КонецПроцедуры // ЗаполнениеПараметровИнформационныхБаз()

// Проверяет базы по списку проверок и формирует письмо в службу поддержки
// Список проверок:
// 		1. Не существует базы СУБД: удалить базу с сервера 1С	
//		2. В рабочей базе заблокирован вход: включить	
//		3. В рабочей базе заблокированы регламентные задания: включить	
//		4. В базе нет описания: необходимо заполнить описание базы	
//		5. В тестовой базе включены регламентные задания: нужно выключить	
//		6. Вход в базу заблокирован на протяжении месяца: нужно удалить
//
Процедура ПроверкаСостоянияБаз() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Базы.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	Базы.ИнформационнаяБаза.Имя КАК ИмяИБ,
	|	Базы.ИнформационнаяБаза.РабочаяБаза КАК РабочаяБаза,
	|	Базы.ИнформационнаяБаза.Владелец КАК Сервер1С,
	|	ПараметрыБаз.Период КАК ДатаИзмененияПараметров,
	|	ПараметрыБаз.Описание КАК Описание,
	|	ПараметрыБаз.СУБД КАК ТипСУБД,
	|	ПараметрыБаз.СерверБД КАК СерверБД,
	|	ПараметрыБаз.БазаСУБД КАК БазаСУБД,
	|	ПараметрыБаз.БазаСУБД.БазаОтсутствует КАК БазаСУБДОтсутствует,
	|	ПараметрыБаз.ПользовательБД КАК ПользовательБД,
	|	Блокировки.Период КАК ДатаИзмененияБлокировок,
	|	Блокировки.БлокировкаВключена КАК БлокировкаВключена,
	|	Блокировки.Начало КАК Начало,
	|	Блокировки.Окончание КАК Окончание,
	|	Блокировки.СообщениеБлокировки КАК СообщениеБлокировки,
	|	Блокировки.КодРазрешения КАК КодРазрешения,
	|	Блокировки.ПараметрБлокировки КАК ПараметрБлокировки,
	|	Блокировки.БлокировкаРегламентныхЗаданийВключена КАК БлокировкаРегламентов
	|ИЗ
	|	РегистрСведений.АктуальныеБазы КАК Базы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыИнформационныхБаз.СрезПоследних(&Период, ) КАК ПараметрыБаз
	|		ПО Базы.ИнформационнаяБаза = ПараметрыБаз.ИнформационнаяБаза
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияБлокировокИнформационныхБаз.СрезПоследних(&Период, ) КАК Блокировки
	|		ПО Базы.ИнформационнаяБаза = Блокировки.ИнформационнаяБаза";
	
	ТаблицаБаз = Запрос.Выполнить().Выгрузить();
	
	// Представление - тема письма
	// Значение      - тело письма
	СписокОшибок = Новый СписокЗначений;

	////////////////////////////////////////////////////////////////////////////////////////////
	// 1. Не существует базы СУБД: удалить базу с сервера 1С
	Если Константы.КонтролироватьСуществованиеБазыСУБД.Получить() Тогда
		СтруктураПоиска = Новый Структура("БазаСУБДОтсутствует", Истина);
		МассивСтрок = ТаблицаБаз.НайтиСтроки(СтруктураПоиска);

		Тема	  		= "Сервер 1С: отсутствует база данных СУБД";
		Заголовок 		= "У следующих баз отсутствует база данных СУБД:";
		ТекстОшибки		= "";
		
		Для каждого СтрокаБазы Из МассивСтрок Цикл
			ОшибкаБазы 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - Сервер 1С: %1, база 1С: %2, сервер БД: %3, база СУБД: %4'"),
						  										СтрокаБазы.Сервер1С, СтрокаБазы.ИмяИБ, СтрокаБазы.СерверБД, СтрокаБазы.БазаСУБД);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаБазы;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СписокОшибок.Добавить(Заголовок + ТекстОшибки, Тема);
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	// 2. В рабочей базе заблокирован вход: включить
	Если Константы.КонтролироватьБлокировкуВходаРабочейБазы.Получить() Тогда
		СтруктураПоиска = Новый Структура("РабочаяБаза, БлокировкаВключена", Истина, Истина);
		МассивСтрок = ТаблицаБаз.НайтиСтроки(СтруктураПоиска);

		Тема	  		= "Сервер 1С: в рабочей базе заблокирован вход";
		Заголовок 		= "У следующих рабочих баз заблокирован вход:";
		ТекстОшибки		= "";
		
		Для каждого СтрокаБазы Из МассивСтрок Цикл
			ОшибкаБазы 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - Сервер 1С: %1, база 1С: %2, сообщение блокировки: %3'"),
						  										СтрокаБазы.Сервер1С, СтрокаБазы.ИмяИБ, СтрокаБазы.СообщениеБлокировки);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаБазы;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СписокОшибок.Добавить(Заголовок + ТекстОшибки, Тема);
		КонецЕсли;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////////////////
	// 3. В рабочей базе заблокированы регламентные задания: включить
	Если Константы.КонтролироватьРегламентныеЗаданияРабочейБазы.Получить() Тогда
		СтруктураПоиска = Новый Структура("РабочаяБаза, БлокировкаРегламентов", Истина, Истина);
		МассивСтрок = ТаблицаБаз.НайтиСтроки(СтруктураПоиска);

		Тема	  		= "Сервер 1С: в рабочей базе заблокированы регламентные задания";
		Заголовок 		= "У следующих рабочих баз заблокированы регламентные задания:";
		ТекстОшибки		= "";
		
		Для каждого СтрокаБазы Из МассивСтрок Цикл
			ОшибкаБазы 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - Сервер 1С: %1, база 1С: %2'"),
						  										СтрокаБазы.Сервер1С, СтрокаБазы.ИмяИБ);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаБазы;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СписокОшибок.Добавить(Заголовок + ТекстОшибки, Тема);
		КонецЕсли;
	КонецЕсли;

	////////////////////////////////////////////////////////////////////////////////////////////
	// 4. В базе нет описания: необходимо заполнить описание базы
	Если Константы.КонтролироватьОписаниеБазы.Получить() Тогда 
		СтруктураПоиска = Новый Структура("Описание", "");
		МассивСтрок = ТаблицаБаз.НайтиСтроки(СтруктураПоиска);

		Тема	  		= "Сервер 1С: у базы не заполнено описание";
		Заголовок 		= "У следующих баз не заполнено описание:";
		ТекстОшибки		= "";
		
		Для каждого СтрокаБазы Из МассивСтрок Цикл
			ОшибкаБазы 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - Сервер 1С: %1, база 1С: %2'"),
						  										СтрокаБазы.Сервер1С, СтрокаБазы.ИмяИБ);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаБазы;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СписокОшибок.Добавить(Заголовок + ТекстОшибки, Тема);
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	// 5. В тестовой базе включены регламентные задания: нужно выключить
	Если Константы.КонтролироватьРегламентныеЗаданияТестовойБазы.Получить() Тогда 
		СтруктураПоиска = Новый Структура("РабочаяБаза, БлокировкаРегламентов", Ложь, Ложь);
		МассивСтрок = ТаблицаБаз.НайтиСтроки(СтруктураПоиска);

		Тема	  		= "Сервер 1С: в тестовой базе включены регламентные задания";
		Заголовок 		= "У следующих тестовых баз включены регламентные задания:";
		ТекстОшибки		= "";
		
		Для каждого СтрокаБазы Из МассивСтрок Цикл
			ОшибкаБазы 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - Сервер 1С: %1, база 1С: %2'"),
						  										СтрокаБазы.Сервер1С, СтрокаБазы.ИмяИБ);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаБазы;
		КонецЦикла; 
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СписокОшибок.Добавить(Заголовок + ТекстОшибки, Тема);
		КонецЕсли;
	КонецЕсли; 
	
	////////////////////////////////////////////////////////////////////////////////////////////
	// 6. Вход в базу заблокирован на протяжении указанного периода: нужно удалить
	Если Константы.КонтролироватьПродолжительнуюБлокировкуВхода.Получить() Тогда 
		КоличествоДнейБлокировки = Константы.КоличествоДнейБлокировкиДоУдаления.Получить();
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КоличествоДнейБлокировки", КоличествоДнейБлокировки);
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Базы.ИнформационнаяБаза КАК ИнформационнаяБаза,
		|	НАЧАЛОПЕРИОДА(БлокировкиПерваяДата.Период, ДЕНЬ) КАК ПервыйСрез
		|ПОМЕСТИТЬ ЗаблокированныеБазы
		|ИЗ
		|	РегистрСведений.АктуальныеБазы КАК Базы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияБлокировокИнформационныхБаз.СрезПоследних(&Дата, ) КАК Блокировки
		|		ПО Базы.ИнформационнаяБаза = Блокировки.ИнформационнаяБаза
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияБлокировокИнформационныхБаз.СрезПоследних(ДОБАВИТЬКДАТЕ(&Дата, ДЕНЬ, -&КоличествоДнейБлокировки), ) КАК БлокировкиПерваяДата
		|		ПО Базы.ИнформационнаяБаза = БлокировкиПерваяДата.ИнформационнаяБаза
		|ГДЕ
		|	Блокировки.БлокировкаВключена
		|	И НЕ БлокировкиПерваяДата.Период ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Блокировки.ИнформационнаяБаза КАК ИнформационнаяБаза,
		|	МИНИМУМ(Блокировки.БлокировкаВключена) КАК БлокировкаВключена
		|ИЗ
		|	ЗаблокированныеБазы КАК ЗаблокированныеБазы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияБлокировокИнформационныхБаз КАК Блокировки
		|		ПО ЗаблокированныеБазы.ИнформационнаяБаза = Блокировки.ИнформационнаяБаза
		|ГДЕ
		|	Блокировки.Период >= ЗаблокированныеБазы.ПервыйСрез
		|
		|СГРУППИРОВАТЬ ПО
		|	Блокировки.ИнформационнаяБаза
		|
		|ИМЕЮЩИЕ
		|	МИНИМУМ(Блокировки.БлокировкаВключена) = ИСТИНА";
		
		Запрос.Текст = ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();

		Тема	  		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сервер 1С: вход в базу заблокирован %1 дней'"),
						  															КоличествоДнейБлокировки);
		Заголовок  		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У следующих баз вход заблокирован %1 дней'"),
						  															КоличествоДнейБлокировки);
		ТекстОшибки		= "";
		
		Пока Выборка.Следующий() Цикл
			ОшибкаБазы 	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' - Сервер 1С: %1, база 1С: %2'"),
						  										Выборка.ИнформационнаяБаза.Владелец, Выборка.ИнформационнаяБаза);
			ТекстОшибки = ТекстОшибки + Символы.ПС + ОшибкаБазы;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			СписокОшибок.Добавить(Заголовок + ТекстОшибки, Тема);
		КонецЕсли;
	КонецЕсли;
	
	// Отправить список ошибок
	Если СписокОшибок.Количество() <> 0 Тогда
		ОтправитьОповещенияПоОшибкам(СписокОшибок);	
	КонецЕсли;	
	
КонецПроцедуры // ПроверкаСостоянияБаз

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции

// Получает список баз рабочего процесса и заполняет свойства каждой базы
//
Процедура ЗаполнитьПараметрыБазСервера(СоединениеСРабочимПроцессом, Сервер1С)
	
	Для каждого ПараЛогинПароль Из Сервер1С.ЛогиныКБазам Цикл
		СоединениеСРабочимПроцессом.AddAuthentication(ПараЛогинПароль.Логин, ПараЛогинПароль.Пароль);
	КонецЦикла;
	
	ОчиститьАктуальныеБазыНаСервере(Сервер1С);
	
	ИнформационныеБазы = СоединениеСРабочимПроцессом.GetInfoBases();
	
	Для Каждого ИнформационнаяБаза Из ИнформационныеБазы Цикл
		
		ПараметрыИБ = Новый Структура();
		ПараметрыИБ.Вставить("Имя"									, ИнформационнаяБаза.Name);
		ПараметрыИБ.Вставить("Описание"                             , ИнформационнаяБаза.Descr);
		ПараметрыИБ.Вставить("СУБД"                                 , ИнформационнаяБаза.DBMS);
		ПараметрыИБ.Вставить("СерверБД"                             , ИнформационнаяБаза.dbServerName);
		ПараметрыИБ.Вставить("БазаСУБД"                             , ИнформационнаяБаза.dbName);
		ПараметрыИБ.Вставить("ПользовательБД"                       , ИнформационнаяБаза.dbUser);
		ПараметрыИБ.Вставить("БлокировкаВключена"                   , ИнформационнаяБаза.SessionsDenied);
		ПараметрыИБ.Вставить("Начало"                               , ИнформационнаяБаза.DeniedFrom);
		ПараметрыИБ.Вставить("Окончание"                            , ИнформационнаяБаза.DeniedTo);
		ПараметрыИБ.Вставить("СообщениеБлокировки"                  , ИнформационнаяБаза.DeniedMessage);
		ПараметрыИБ.Вставить("КодРазрешения"                        , ИнформационнаяБаза.PermissionCode);
		ПараметрыИБ.Вставить("ПараметрБлокировки"                   , ИнформационнаяБаза.DeniedParameter);
		ПараметрыИБ.Вставить("БлокировкаРегламентныхЗаданийВключена", ИнформационнаяБаза.ScheduledJobsDenied);
		ПараметрыИБ.Вставить("Сервер1С"								, Сервер1С);
		
		ЗаполнитьПараметрыИнформационнойБазы(ПараметрыИБ);
		
		БазаОтсутствует = ОтключитьСоединениеCOMАдминистратора(ИнформационнаяБаза, ПараметрыИБ, СоединениеСРабочимПроцессом);
		
		Если ЗначениеЗаполнено(ПараметрыИБ.БазаСУБД)
		   И Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПараметрыИБ.БазаСУБД)) Тогда
			
			Если ПараметрыИБ.БазаСУБД.БазаОтсутствует <> БазаОтсутствует Тогда
				ОбъектБазыСУБД = ПараметрыИБ.БазаСУБД.ПолучитьОбъект();
				ОбъектБазыСУБД.БазаОтсутствует = БазаОтсутствует;
				ОбъектБазыСУБД.Записать();	
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнформационныеБазы = Неопределено;
		
КонецПроцедуры // ЗаолнитьПараметрыБазСервера()

Процедура ОчиститьАктуальныеБазыНаСервере(Сервер1С)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сервер1С", Сервер1С);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АктуальнаяБаза.ИнформационнаяБаза КАК ИнформационнаяБаза
	|ИЗ
	|	РегистрСведений.АктуальныеБазы КАК АктуальнаяБаза
	|ГДЕ
	|	АктуальнаяБаза.ИнформационнаяБаза.Владелец <> &Сервер1С";
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаБаз = РезультатЗапроса.Выгрузить();
	
	АктуальныеБазыНабор = РегистрыСведений.АктуальныеБазы.СоздатьНаборЗаписей();
	АктуальныеБазыНабор.Загрузить(ТаблицаБаз);
	АктуальныеБазыНабор.Записать(Истина);
		
КонецПроцедуры
 

// Отключает соединения COM-администратора
//
// Возвращаемое значение:
//	 Булево - существует данная база в СУБД
// 
Функция ОтключитьСоединениеCOMАдминистратора(ИнформационнаяБаза, ПараметрыИБ, СоединениеСРабочимПроцессом)

	БазаОтсутствует = Ложь;
	
	Попытка
		
		СоединенияБазы = СоединениеСРабочимПроцессом.GetInfoBaseConnections(ИнформационнаяБаза);
		
		Для Каждого Соединение Из СоединенияБазы Цикл
			Если Соединение.AppID = "COMConsole" Тогда
				СоединениеСРабочимПроцессом.Disconnect(Соединение);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		
		Если СтрНайти(ТекстОшибки, "База данных отсутствует в сервере баз данных") Тогда
			БазаОтсутствует = Истина; 
		КонецЕсли; 
		
	КонецПопытки;
	
	Возврат БазаОтсутствует;
	
КонецФункции // ОтключитьСоединениеCOMАдминистратора()

// Создает и заполняет параметры информационной базы
// 
Процедура ЗаполнитьПараметрыИнформационнойБазы(ПараметрыИБ)
	
	ИнформационнаяБаза	= НайтиСоздатьИнформационнуюБазу(ПараметрыИБ);	
	СерверБД			= НайтиСоздатьСерверБД(ПараметрыИБ);
	БазаСУБД		 	= НайтиСоздатьБазуСУБД(ПараметрыИБ, СерверБД);	
	СУБД 				= ПолучитьПараметрСУБД(ПараметрыИБ.СУБД);
	
	ПараметрыИБ.Вставить("ИнформационнаяБаза",	ИнформационнаяБаза);
	ПараметрыИБ.Вставить("СерверБД", 			СерверБД);
	ПараметрыИБ.Вставить("БазаСУБД", 			БазаСУБД);	
	ПараметрыИБ.Вставить("СУБД", 				СУБД);
	
	АктуальнаяБаза = РегистрыСведений.АктуальныеБазы.СоздатьМенеджерЗаписи();
	АктуальнаяБаза.ИнформационнаяБаза = ИнформационнаяБаза;
	АктуальнаяБаза.Записать(Истина);
	
	ЗаписатьИзмененияПараметровИБ(ПараметрыИБ, "ПараметрыИнформационныхБаз");
	ЗаписатьИзмененияПараметровИБ(ПараметрыИБ, "ИсторияБлокировокИнформационныхБаз");
	
КонецПроцедуры // ЗаполнитьПараметрыИнформационнойБазы()

// Ищет сервер БД, если не находит - создает
//
// Параметры:
//  ПараметрыИБ - Структура - в качестве ключа передается свойство информационной базы
//						 в качестве значения - значение строкой.
//
// Возвращаемое значение:
//  СправочникСсылка.СерверыБД - найденная или созданная ссылка.
// 
Функция НайтиСоздатьСерверБД(ПараметрыИБ)
	
	СерверБД = ?(ПараметрыИБ.СерверБД = "", "Пусто", ПараметрыИБ.СерверБД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерверыБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СерверыБД КАК СерверыБД
	|ГДЕ
	|	СерверыБД.Имя = &Имя
	|	И Не СерверыБД.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Имя", СерверБД);
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		
		ЭлементИБ = Справочники.СерверыБД.СоздатьЭлемент();
		ЭлементИБ.Имя			= СерверБД;
		ЭлементИБ.Наименование	= СерверБД;
		
		ЭлементИБ.Записать();
		
		Возврат ЭлементИБ.Ссылка;
		
	Иначе

		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
		
КонецФункции // НайтиСоздатьСерверБД()

// Ищет базу СУБД, если не находит - создает
//
// Параметры:
//  ПараметрыИБ - Структура - в качестве ключа передается свойство информационной базы
//						 в качестве значения - значение строкой.
//
// Возвращаемое значение:
//  СправочникСсылка.БазыСУБД - найденная или созданная ссылка.
//
Функция НайтиСоздатьБазуСУБД(ПараметрыИБ, СерверИБ)
	
	БазаСУБД = ?(ПараметрыИБ.БазаСУБД = "", "Пустая", ПараметрыИБ.БазаСУБД);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БазыСУБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БазыСУБД КАК БазыСУБД
	|ГДЕ
	|	БазыСУБД.Имя = &Имя
	|	И БазыСУБД.Владелец = &Владелец
	|	И НЕ БазыСУБД.ПометкаУдаления
	|	И НЕ БазыСУБД.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Имя",		БазаСУБД);
	Запрос.УстановитьПараметр("Владелец",	СерверИБ);
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		
		ЭлементИБ = Справочники.БазыСУБД.СоздатьЭлемент();
		
		ЭлементИБ.Владелец 		= СерверИБ;
		ЭлементИБ.Имя			= БазаСУБД;
		ЭлементИБ.Наименование	= СерверИБ.Имя + "@" + БазаСУБД;
		
		ЭлементИБ.Записать();
		
		Возврат ЭлементИБ.Ссылка;
		
	Иначе

		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
		
КонецФункции // НайтиСоздатьБазуСУБД()

// Ищет информационную базу, если не находит - создает
//
// Параметры:
//  ПараметрыИБ - Структура - в качестве ключа передается свойство информационной базы
//						 в качестве значения - значение строкой.
//
// Возвращаемое значение:
//  СправочникСсылка.ИнформационныеБазы - найденная или созданная ссылка.
//
Функция НайтиСоздатьИнформационнуюБазу(ПараметрыИБ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеБазы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.Имя = &Имя
	|	И ИнформационныеБазы.Владелец = &Владелец
	|	И Не ИнформационныеБазы.ПометкаУдаления
	|	И Не ИнформационныеБазы.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Имя",		ПараметрыИБ.Имя);
	Запрос.УстановитьПараметр("Владелец",	ПараметрыИБ.Сервер1С);
	
	Результат = Запрос.Выполнить();
		
	Если Результат.Пустой() Тогда
		
		ЭлементИБ = Справочники.ИнформационныеБазы.СоздатьЭлемент();
		
		ЭлементИБ.Владелец 		= ПараметрыИБ.Сервер1С;
		ЭлементИБ.Имя			= ПараметрыИБ.Имя;
		ЭлементИБ.Наименование	= ПараметрыИБ.Сервер1С.Имя + "@" + ПараметрыИБ.Имя;
		
		ЭлементИБ.Записать();
		
		Возврат ЭлементИБ.Ссылка;
		
	Иначе

		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли; 
		
КонецФункции // НайтиСоздатьИнформационнуюБазу()

// Преобразовывает строку СУБД в перечисление
//
// Параметры:
//  СУБД - Строка - строковое представление СУБД.
//
// Возвращаемое значение:
//  Перечисление.СУБД - преобразованное значение СУБД.
//
Функция ПолучитьПараметрСУБД(СУБД)
	
	ВидСУБД = Неопределено;
	
	Если СУБД = "MSSQLServer" Тогда
		ВидСУБД = Перечисления.СУБД.MSSQL;
	ИначеЕсли СУБД = "PostgreSQL" Тогда
		ВидСУБД = Перечисления.СУБД.PostgreSQL;
	ИначеЕсли СУБД = "OracleDatabase" Тогда
		ВидСУБД = Перечисления.СУБД.OracleDatabase;
	ИначеЕсли СУБД = "IBMDB2" Тогда
		ВидСУБД = Перечисления.СУБД.IBMDB2;
	КонецЕсли;
	
	Возврат ВидСУБД;
	
КонецФункции // ПолучитьПараметрСУБД()

// Процедура записывает изменения параметров в:
//		"РегистрСведений.ПараметрыИнформационныхБаз"
//		"РегистрСведений.ИсторияБлокировокИнформационныхБаз"
//
Процедура ЗаписатьИзмененияПараметровИБ(ПараметрыИБ, ИмяРегистра)
	
	Отбор = Новый Структура("ИнформационнаяБаза", ПараметрыИБ.ИнформационнаяБаза);
	
	РС_ПараметрыИБ = РегистрыСведений[ИмяРегистра].СрезПоследних(, Отбор);
	
	// Проверяем изменения. Если хоть одно поле изменилось - пишем в регистр.
	БылиИзменения = Ложь;
	
	Если РС_ПараметрыИБ.Количество() = 0 Тогда
		РС_ПараметрыИБ.Добавить();
	КонецЕсли;
	
	СтрокаРС = РС_ПараметрыИБ[0];
	
	Для каждого Колонка Из РС_ПараметрыИБ.Колонки Цикл
		
		Если Колонка.Имя = "Период" Тогда
			Продолжить;
		КонецЕсли; 
		
		Если СтрокаРС[Колонка.Имя] <> ПараметрыИБ[Колонка.Имя] Тогда
			СтрокаРС[Колонка.Имя] = ПараметрыИБ[Колонка.Имя];
			БылиИзменения = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Если БылиИзменения Тогда
		МенеджерЗаписи = РегистрыСведений[ИмяРегистра].СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРС);
		МенеджерЗаписи.Период = ТекущаяДата();
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
		
КонецПроцедуры // ЗаписатьИзмененияПараметровИБ()

// Процедура отправляет письма по ошибкам в соответствии с настройками ИБ
//
// Параметры:
//	СписокОшибок - СписокЗначений - Представление - тема письма
//								  - Значение - тело письма
//
Процедура ОтправитьОповещенияПоОшибкам(СписокОшибок)
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Профиль = РаботаСПочтой.ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	ПочтаОбъект = Новый ИнтернетПочта;
	
	Попытка
		ПочтаОбъект.Подключиться(Профиль);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	АдресПочты = Константы.АдресДляОповещения.Получить();
	
	Если Не ЗначениеЗаполнено(АдресПочты) Тогда
		Возврат;
	КонецЕсли; 
	
	Для каждого Ошибка Из СписокОшибок Цикл
		ОтправленоУспешно = РаботаСПочтой.ОтправитьПисьмо(ПочтаОбъект, АдресПочты, УчетнаяЗапись, 
															Ошибка.Значение, Ошибка.Представление);
		Если Не ОтправленоУспешно Тогда
			ВызватьИсключение ОписаниеОшибки(); 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры // ОтправитьОповещенияПоОшибкам()

#КонецОбласти
